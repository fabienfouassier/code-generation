## common substitutions without date and user
#set ($package = $options.getPackage())
#set ($factoryClass = $options.getFactoryClassName())
#set ($factoryPackage = $options.getFactoryPackage())
#set ($factoryExtraImport = $options.getExtraFactoryImport())
#set ($ImplementationExtraImport = $options.getExtraImplementationImport())

## class substitutions


package ${package}.impl;

import ${package}.*;
${implementationExtraImport}

import java.net.URI;
import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: ${implementationName} <br>
 * @version generated on ${date} by ${user}
 */
public class ${implementationName} extends WrappedIndividualImpl implements ${interfaceName} {

    public ${implementationName}(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
    }

	#foreach (${owlDataProperty} in ${root.getOwlDataPropertiesForClass()})

    	/* ***************************************************
     	 * Data Property ${propertyIri}
     	 */
     
    	#if (!${propertyIri.isFunctional()})
     
	    	public Collection<? extends ${propertyRangeForClass}> get${OwlProperty}() {
				return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.${VocabProperty}, ${propertyRangeForClass}.class);
	    	}
	
	    	public boolean has${OwlProperty}() {
				return !get${OwlProperty}().isEmpty();
	    	}
	
	    	public void add${OwlProperty}(${propertyRange} new${OwlProperty}) {
		    	getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.${VocabProperty}, new${OwlProperty});
	    	}
	
	    	public void remove${OwlProperty}(${propertyRange} old${OwlProperty}) {
				getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.${VocabProperty}, old${OwlProperty});
	    	}
		
		#else 

	    	/* ***************************************************
	     	 * Data Property ${propertyIri}
	     	 */
	     	
	    	public Collection<? extends ${propertyRangeForClass}> get${OwlProperty}() {
				return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.${VocabProperty}, ${propertyRangeForClass}.class);
	    	}
	
	    	public boolean has${OwlProperty}() {
				return !get${OwlProperty}().isEmpty();
	    	}
	
	    	public void add${OwlProperty}(${propertyRange} new${OwlProperty}) {
		    	getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.${VocabProperty}, new${OwlProperty});
	    	}
	
	    	public void remove${OwlProperty}(${propertyRange} old${OwlProperty}) {
				getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.${VocabProperty}, old${OwlProperty});
	    	}

		#end
	
	#end

	#foreach (${owlObjectProperty} in ${root.getOwlObjectPropertiesForClass()})

	    /* ***************************************************
	     * Object Property ${propertyIri}
	     */
	     
	    #if (!${propertyIri.isFunctional()}) 
	     
		    public Collection<? extends ${propertyRange}> get${OwlProperty}() {
		        return getDelegate().getPropertyValues(getOwlIndividual(),
		                                               Vocabulary.${VocabProperty},
		                                               ${propertyRangeImplementation}.class);
		    }
		
		    public boolean has${OwlProperty}() {
			   return !get${OwlProperty}().isEmpty();
		    }
		
		    public void add${OwlProperty}(${propertyRange} new${OwlProperty}) {
		        getDelegate().addPropertyValue(getOwlIndividual(),
		                                       Vocabulary.${VocabProperty},
		                                       new${OwlProperty});
		    }
		
		    public void remove${OwlProperty}(${propertyRange} old${OwlProperty}) {
		        getDelegate().removePropertyValue(getOwlIndividual(),
		                                          Vocabulary.${VocabProperty},
		                                          old${OwlProperty});
		    }
		
		#else
	
		    /* ***************************************************
		     * Object Property ${propertyIri}
		     */
		     
		    public Collection<? extends ${propertyRange}> get${OwlProperty}() {
		        return getDelegate().getPropertyValues(getOwlIndividual(),
		                                               Vocabulary.${VocabProperty},
		                                               ${propertyRangeImplementation}.class);
		    }
		
		    public boolean has${OwlProperty}() {
			   return !get${OwlProperty}().isEmpty();
		    }
		
		    public void add${OwlProperty}(${propertyRange} new${OwlProperty}) {
		        getDelegate().addPropertyValue(getOwlIndividual(),
		                                       Vocabulary.${VocabProperty},
		                                       new${OwlProperty});
		    }
		
		    public void remove${OwlProperty}(${propertyRange} old${OwlProperty}) {
		        getDelegate().removePropertyValue(getOwlIndividual(),
		                                          Vocabulary.${VocabProperty},
		                                          old${OwlProperty});
			}
		
		#end
		
	#end
}
	