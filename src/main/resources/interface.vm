## common substitutions without date and user

#set ($package = $options.getPackage())
#set ($factoryClass = $options.getFactoryClassName())
#set ($factoryPackage = $options.getFactoryPackage())
#set ($factoryExtraImport = $options.getExtraFactoryImport())
#set ($ImplementationExtraImport = $options.getExtraImplementationImport())

## class substitutions


package ${package};

import java.net.URI;
import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * ${javadoc}
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: ${interfaceName} <br>
 * @version generated on ${date} by ${user}
 */

public interface ${interfaceName} extends ${superInterfaces} {

	#foreach (${owlDataProperty} in ${root.getOwlDataPropertiesForClass()})
	
		#if (!${propertyIri.isFunctional()})
	
		    /* ***************************************************
		     * Property ${propertyIri}
		     */
		     
		    /**
		     * Gets all property values for the ${owlProperty} property.<p>
		     * ${javadoc}
		     * @returns a collection of values for the ${owlProperty} property.
		     */
		    Collection<? extends ${propertyRangeForClass}> get${OwlProperty}();
		
		    /**
		     * Checks if the class has a ${owlProperty} property value.<p>
		     * ${javadoc}
		     * @return true if there is a ${owlProperty} property value.
		     */
		    boolean has${OwlProperty}();
		
		    /**
		     * Adds a ${owlProperty} property value.<p>
		     * ${javadoc}
		     * @param new${OwlProperty} the ${owlProperty} property value to be added
		     */
		    void add${OwlProperty}(${propertyRange} new${OwlProperty});
		
		    /**
		     * Removes a ${owlProperty} property value.<p>
		     * ${javadoc}
		     * @param old${OwlProperty} the ${owlProperty} property value to be removed.
		     */
		    void remove${OwlProperty}(${propertyRange} old${OwlProperty});
		
		#else
		
		    /* ***************************************************
		     * Property ${propertyIri}
		     */
		     
		    /**
		     * Gets all property values for the ${owlProperty} property.<p>
		     * ${javadoc}
		     * @returns a collection of values for the ${owlProperty} property.
		     */
		    Collection<? extends ${propertyRangeForClass}> get${OwlProperty}();
		
		    /**
		     * Checks if the class has a ${owlProperty} property value.<p>
		     * ${javadoc}
		     * @return true if there is a ${owlProperty} property value.
		     */
		    boolean has${OwlProperty}();
		
		    /**
		     * Adds a ${owlProperty} property value.<p>
		     * ${javadoc}
		     * @param new${OwlProperty} the ${owlProperty} property value to be added
		     */
		    void add${OwlProperty}(${propertyRange} new${OwlProperty});
		
		    /**
		     * Removes a ${owlProperty} property value.<p>
		     * ${javadoc}
		     * @param old${OwlProperty} the ${owlProperty} property value to be removed.
		     */
		    void remove${OwlProperty}(${propertyRange} old${OwlProperty});
		
		#end

	#end
	
	#foreach (${owlObjectProperty} in ${root.getOwlObjectPropertiesForClass()})
		
		#if (!${propertyIri.isFunctional()})
			
		    /* ***************************************************
		     * Property ${propertyIri}
		     */
		     
		    /**
		     * Gets all property values for the ${owlProperty} property.<p>
		     * ${javadoc}
		     * @returns a collection of values for the ${owlProperty} property.
		     */
		    Collection<? extends ${propertyRange}> get${OwlProperty}();
		
		    /**
		     * Checks if the class has a ${owlProperty} property value.<p>
		     * ${javadoc}
		     * @return true if there is a ${owlProperty} property value.
		     */
		    boolean has${OwlProperty}();
		
		    /**
		     * Adds a ${owlProperty} property value.<p>
		     * ${javadoc}
		     * @param new${OwlProperty} the ${owlProperty} property value to be added
		     */
		    void add${OwlProperty}(${propertyRange} new${OwlProperty});
		
		    /**
		     * Removes a ${owlProperty} property value.<p>
		     * ${javadoc}
		     * @param old${OwlProperty} the ${owlProperty} property value to be removed.
		     */
		    void remove${OwlProperty}(${propertyRange} old${OwlProperty});
			
		#else
		
		    /* ***************************************************
		     * Property ${propertyIri}
		     */
		     
		    /**
		     * Gets all property values for the ${owlProperty} property.<p>
		     * ${javadoc}
		     * @returns a collection of values for the ${owlProperty} property.
		     */
		    Collection<? extends ${propertyRange}> get${OwlProperty}();
		
		    /**
		     * Checks if the class has a ${owlProperty} property value.<p>
		     * ${javadoc}
		     * @return true if there is a ${owlProperty} property value.
		     */
		    boolean has${OwlProperty}();
		
		    /**
		     * Adds a ${owlProperty} property value.<p>
		     * ${javadoc}
		     * @param new${OwlProperty} the ${owlProperty} property value to be added
		     */
		    void add${OwlProperty}(${propertyRange} new${OwlProperty});
		
		    /**
		     * Removes a ${owlProperty} property value.<p>
		     * ${javadoc}
		     * @param old${OwlProperty} the ${owlProperty} property value to be removed.
		     */
		    void remove${OwlProperty}(${propertyRange} old${OwlProperty});
		
		#end
		
	#end
	
    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
	